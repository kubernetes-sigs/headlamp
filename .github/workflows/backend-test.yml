name: Backend test

on:
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-test.yml'
  push:
    branches:
      - main
      - rc-*
      - testing-rc-*

permissions:
  contents: read

env:
  HEADLAMP_RUN_INTEGRATION_TESTS: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write # needed for commenting on issues for coverage changes
      pull-requests: write # needed for commenting on PRs for coverage changes
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
    
      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: '1.24.*'

      - name: Install dependencies
        run: |
          cd backend
          go mod download
    
      - name: Start cluster
        uses: medyagh/setup-minikube@d8c0eb871f6f455542491d86a574477bd3894533 # latest

      - name: Check cluster status and enable headlamp addon
        run: |
          minikube status
          minikube addons enable headlamp
          kubectl wait deployment -n headlamp headlamp --for condition=Available=True --timeout=30s    

      # - name: setup and run golangci-lint 
      #   uses: golangci/golangci-lint-action@2226d7cb06a077cd73e56eedd38eecad18e5d837 # 6.5.0
      #   with:
      #     version: v1.64
      #     working-directory: backend
      #     skip-cache: true
      #     args: --timeout 3m

      - name: Lint, Build & Check
        run: |
          cd $GITHUB_WORKSPACE
          make backend

      - name: Run tests and calculate code coverage
        run: |
          set -x
          cd backend
          go test ./... -coverprofile=coverage.out -covermode=atomic -coverpkg=./...
          go tool cover -html=coverage.out -o backend_coverage.html
          testcoverage_full=$(go tool cover -func=coverage.out)
          testcoverage=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
          testcoverage_full_base64=$(echo "$testcoverage_full" | base64 -w 0)
          echo "Code coverage: $testcoverage"
          echo "$testcoverage_full"
          echo "coverage=$testcoverage" >> $GITHUB_ENV
          echo "testcoverage_full_base64=$testcoverage_full_base64" >> $GITHUB_ENV
          echo "cleaning up..."
          rm ~/.config/Headlamp/kubeconfigs/config
        shell: bash

      - name: Upload coverage report as artifact
        id: upload-artifact
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        with:
          name: backend-coverage-report
          path: ./backend/backend_coverage.html

      - name: Get base branch code coverage
        if: ${{ github.event_name }} == 'pull_request'
        run: |
          if [[ -z "${{ github.base_ref }}" ]]; then
            echo "Base branch is empty. Skipping code coverage comparison."
            exit 0
          fi

          cd backend
          base_branch="${{ github.base_ref }}"
          testcoverage="${{ env.coverage }}"
          git fetch origin "$base_branch"
          git checkout "origin/$base_branch"
          go test ./... -coverprofile=base_coverage.out -covermode=atomic -coverpkg=./... || true
          if [[ -f base_coverage.out ]]; then
            base_coverage=$(go tool cover -func=base_coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
            echo "Base branch code coverage: $base_coverage"
            # export for later steps
            echo "base_coverage=$base_coverage" >> $GITHUB_ENV
          else
            echo "Tests failed or base_coverage.out not found. Skipping code coverage calculation."
          fi
        shell: bash

      - name: Compare code coverage
        if: ${{ github.event_name }} == 'pull_request'
        run: |
          set -x
          if [[ -z "${{ github.base_ref }}" ]]; then
            echo "Base branch is empty. Skipping code coverage comparison."
            exit 0
          fi

          testcoverage="${{ env.coverage }}"
          base_coverage="${{ env.base_coverage }}"
          if [[ -z $testcoverage || -z $base_coverage ]]; then
            echo "testcoverage or base_coverage is not set. Cannot calculate coverage difference."
            exit 0
          fi
          
          echo "testcoverage=$testcoverage"
          echo "base_coverage=$base_coverage"
          echo "$testcoverage - $base_coverage"

          coverage_diff=$(echo "$testcoverage - $base_coverage" | bc)
          echo "Coverage change: $coverage_diff"
          echo "coverage_diff=$coverage_diff" >> $GITHUB_ENV
        shell: bash

      - name: Comment on PR
        if: ${{ github.event_name }} == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          if [[ -z "${{ github.base_ref }}" ]]; then
            echo "Base branch is empty. Skipping code coverage comparison."
            exit 0
          fi

          testcoverage="${{ env.coverage }}"
          base_coverage="${{ env.base_coverage }}"
          if [[ -z $testcoverage || -z $base_coverage ]]; then
            echo "testcoverage or base_coverage is not set. Will not post comment."
            exit 0
          fi

          testcoverage_full_base64="${{ env.testcoverage_full_base64 }}"
          testcoverage_full=$(echo "$testcoverage_full_base64" | base64 --decode)

          coverage_diff="${{ env.coverage_diff }}"
          artifact_url=${{ steps.upload-artifact.outputs.artifact-url }}

          if (( $(echo "$coverage_diff < 0" | bc -l) )); then
            emoji="ðŸ˜ž" # Decreased coverage
          else
            emoji="ðŸ˜ƒ" # Increased or unchanged coverage
          fi

          comment="Backend Code coverage changed from $base_coverage% to $testcoverage%. Change: $coverage_diff% $emoji."
          echo "$comment"

          # Add the full coverage report as a collapsible section
          comment="${comment}

          <details>
            <summary>Coverage report</summary>

          \`\`\`
          $testcoverage_full
          \`\`\`

          </details>

          [Html coverage report download]($artifact_url)
          "

          echo "$comment"
          pr_number="${{ github.event.pull_request.number }}"
          gh api \
            repos/${{ github.repository }}/issues/$pr_number/comments \
            -f body="$comment"
