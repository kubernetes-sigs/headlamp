{
  "name": "headlamp-root",
  "version": "0.1.0",
  "private": true,
  "description": "Headlamp - An easy-to-use and extensible Kubernetes web UI",
  "repository": {
    "type": "git",
    "url": "https://github.com/kubernetes-sigs/headlamp.git"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=20.11.1",
    "npm": ">=10.0.0"
  },
  "workspaces": [
    "frontend",
    "app",
    "app/e2e-tests",
    "e2e-tests",
    "eslint-config",
    "load-tests",
    "plugins/headlamp-plugin"
  ],
  "scripts": {
    "install:all": "npm install --legacy-peer-deps && npm run create --workspace=eslint-config && npm run frontend:install && npm run backend:build && npm run app:install",
    "install:frontend": "npm run frontend:install",
    "install:backend": "npm run backend:build",
    "install:app": "npm install --workspace=app",
    "backend:install:linter": "GOBIN=`pwd`/backend/tools go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64",
    "build": "npm run backend:build && npm run frontend:build",
    "build:image": "sh -c 'docker buildx build --pull --platform=local -t ghcr.io/headlamp-k8s/headlamp:$(git describe --tags --always --dirty) -f Dockerfile .'",
    "test": "npm run backend:test && npm run frontend:test",
    "lint": "npm run backend:lint && npm run frontend:lint",
    "lint:fix": "npm run backend:lint:fix && npm run frontend:lint:fix",
    "clean": "rm -rf frontend/build frontend/node_modules app/node_modules app/dist backend/headlamp-server backend/headlamp-server.exe node_modules",
    "backend:build": "cd backend && go build -o ./headlamp-server ./cmd",
    "backend:lint": "npm run backend:install:linter && cd backend && ./tools/golangci-lint run",
    "backend:lint:fix": "npm run backend:install:linter && cd backend && ./tools/golangci-lint run --fix",
    "backend:test": "cd backend && go test -v -p 1 ./...",
    "backend:coverage": "cd backend && go test -v -p 1 -coverprofile=coverage.out ./... && go tool cover -func=coverage.out",
    "backend:coverage:html": "cd backend && go test -v -p 1 -coverprofile=coverage.out ./... && go tool cover -html=coverage.out",
    "backend:format": "cd backend && go fmt ./cmd/ ./pkg/**",
    "backend:start": "echo 'Warning: Running with Helm and dynamic-clusters endpoints enabled.' && HEADLAMP_BACKEND_TOKEN=headlamp HEADLAMP_CONFIG_ENABLE_HELM=true HEADLAMP_CONFIG_ENABLE_DYNAMIC_CLUSTERS=true ./backend/headlamp-server -dev -proxy-urls https://artifacthub.io/* -listen-addr=localhost",
    "backend:dev": "echo 'Starting Headlamp backend in dev mode with Air...' && cd backend && air",
    "backend:start:metrics": "echo 'Running backend with Prometheus metrics enabled' && HEADLAMP_BACKEND_TOKEN=headlamp HEADLAMP_CONFIG_METRICS_ENABLED=true HEADLAMP_CONFIG_ENABLE_HELM=true HEADLAMP_CONFIG_ENABLE_DYNAMIC_CLUSTERS=true ./backend/headlamp-server -dev -proxy-urls https://artifacthub.io/* -listen-addr=localhost",
    "backend:start:traces": "echo 'Running backend with distributed tracing enabled' && HEADLAMP_BACKEND_TOKEN=headlamp HEADLAMP_CONFIG_TRACING_ENABLED=true HEADLAMP_CONFIG_ENABLE_HELM=true HEADLAMP_CONFIG_ENABLE_DYNAMIC_CLUSTERS=true ./backend/headlamp-server -dev -proxy-urls https://artifacthub.io/* -listen-addr=localhost",
    "frontend:install": "npm install && npm run create --workspace=eslint-config",
    "frontend:install:ci": "npm ci && npm run create --workspace=eslint-config",
    "frontend:build": "npm run frontend:install && npm run build --workspace=frontend",
    "frontend:build:storybook": "npm run frontend:install && npm run build-storybook --workspace=frontend",
    "frontend:lint": "npm run frontend:install && npm run lint --workspace=frontend -- --max-warnings 0 && npm run format-check --workspace=frontend",
    "frontend:lint:fix": "npm run frontend:install && npm run lint --workspace=frontend -- --fix && npm run format --workspace=frontend",
    "frontend:tsc": "npm run frontend:install && npm run tsc --workspace=frontend",
    "frontend:test": "npm run frontend:install && npm run test --workspace=frontend -- --coverage",
    "frontend:start": "npm run frontend:install && npm start --workspace=frontend",
    "frontend:storybook": "npm run frontend:install && npm run storybook --workspace=frontend",
    "docs": "npm run frontend:install && npm run build-typedoc --workspace=frontend",
    "plugins:test": "npm install --workspace=plugins/headlamp-plugin && cd plugins/headlamp-plugin && ./test-headlamp-plugin.js && ./test-plugins-examples.sh && cd ../pluginctl/src && npm install && node ./plugin-management.e2e.js && cd .. && npx jest src/multi-plugin-management.test.js && npx jest src/plugin-management.test.js && npm run test",
    "i18n": "npm run frontend:install && npm run i18n --workspace=frontend",
    "i18n:check": "npm run frontend:install && npm run i18n --workspace=frontend -- --fail-on-update",
    "app:install": "npm install --workspace=app",
    "app:build": "npm run app:install && npm run frontend:build && npm install --workspace=app && cd app && node ./scripts/setup-plugins.js && npm run build",
    "app:build:dir": "npm run app:install && npm run frontend:build && npm install --workspace=app && cd app && node ./scripts/setup-plugins.js && npm run build -- --dir",
    "app:package": "npm run app:build && cd app && npm run package -- --win --linux --mac",
    "app:package:win": "npm run app:build && cd app && npm run package -- --win",
    "app:package:win:msi": "npm run app:build && cd app && npm run package-msi",
    "app:package:linux": "npm run app:build && cd app && npm run package -- --linux",
    "app:package:mac": "npm run app:build && cd app && npm run package -- --mac",
    "app:test": "npm run app:test:unit && npm run app:test:e2e",
    "app:test:unit": "npm run app:install && cd app && npm run test",
    "app:test:e2e": "npm run app:install && npm run test --workspace=app/e2e-tests",
    "app:tsc": "npm run app:install && cd app && npm run tsc",
    "app:start": "npm run app:install && cd app && node ./scripts/setup-plugins.js && npm run start",
    "app:start:client": "npm run app:install && npm run dev-only-app --workspace=app",
    "dev": "npm run start",
    "start": "npm run install:all && concurrently \"npm run backend:start\" \"npm run frontend:start\" --names \"backend,frontend\" --prefix-colors \"blue,green\"",
    "start:with-app": "npm run install:all && concurrently \"npm run backend:start\" \"npm run frontend:start\" \"npm run app:start:client\" --names \"backend,frontend,app\" --prefix-colors \"blue,green,yellow\"",
    "start:app": "npm run app:start",
    "start:backend": "npm run backend:build && npm run backend:start",
    "start:frontend": "npm run frontend:start"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "keywords": [
    "kubernetes",
    "k8s",
    "ui",
    "web",
    "dashboard",
    "cluster",
    "management"
  ]
}